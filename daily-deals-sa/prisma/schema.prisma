// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]
  orders         Order[]
  cartItems      CartItem[]
  addresses      Address[]
  claimedDrops   FreeDrop[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  USER
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String   @db.Text
  price         Float
  originalPrice Float?
  discount      Float?   @default(0)
  category      String
  brand         String?
  image         String
  images        String[] @default([])
  stock         Int      @default(0)
  sku           String   @unique
  featured      Boolean  @default(false)
  active        Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  cartItems  CartItem[]
  orderItems OrderItem[]
  freeDrops  FreeDrop[]
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Address {
  id         String      @id @default(cuid())
  userId     String
  type       AddressType @default(SHIPPING)
  firstName  String
  lastName   String
  company    String?
  address1   String
  address2   String?
  city       String
  province   String
  postalCode String
  country    String      @default("South Africa")
  phone      String?
  isDefault  Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // üîÅ Back-relations that match the TWO named relations on Order:
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")
}

enum AddressType {
  SHIPPING
  BILLING
}

model Order {
  id                String        @id @default(cuid())
  userId            String
  orderNumber       String        @unique
  status            OrderStatus   @default(PENDING)
  subtotal          Float
  shippingCost      Float         @default(0)
  tax               Float         @default(0)
  total             Float
  paymentStatus     PaymentStatus @default(PENDING)
  paymentIntentId   String?
  shippingAddressId String?
  billingAddressId  String?
  trackingNumber    String?
  courierService    String?
  estimatedDelivery DateTime?
  notes             String?       @db.Text
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  user  User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items OrderItem[]

  // üß≠ Named relations (unchanged) ‚Äî names MUST match the back-relations above
  shippingAddress Address? @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress  Address? @relation("BillingAddress", fields: [billingAddressId], references: [id])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([orderId, productId])
}

model Coupon {
  id              String     @id @default(cuid())
  code            String     @unique
  description     String?
  type            CouponType @default(PERCENTAGE)
  value           Float
  minimumAmount   Float?
  maximumDiscount Float?
  usageLimit      Int?
  usedCount       Int        @default(0)
  active          Boolean    @default(true)
  validFrom       DateTime?
  validUntil      DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
}

model FreeDrop {
  id              String    @id @default(cuid())
  productId       String
  product         Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  dropAt          DateTime  // UTC in DB; compare using Africa/Johannesburg in logic
  claimedByUserId String?
  claimedBy       User?     @relation(fields: [claimedByUserId], references: [id], onDelete: SetNull)
  claimedAt       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([productId, dropAt])
  @@index([dropAt])
  @@index([claimedByUserId])
}
